{"version":3,"sources":["components/UserFormPage.js","components/UsersListPage.js","App.js","serviceWorker.js","index.js"],"names":["FormContainer","styled","div","BotaoSalvar","button","NovoH3","h3","UserFormPage","state","nameValue","emailValue","onChangeName","event","setState","target","value","onChangeEmail","onClickCriar","body","name","email","axios","post","headers","Authorization","then","response","window","alert","catch","error","console","log","placeholder","this","onChange","onClick","React","Component","UserItem","NovoH1","h1","NovoButton","UsersListPage","usersList","getUsersList","a","get","data","onClickDeleteUser","userId","delete","map","user","id","App","currentPage","onClickChangePage","nextPage","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3aaf79c0.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\n\nconst FormContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 40px;\n    box-sizing: border-box;\n    margin: 30px auto;\n    width: 500px;\n    border: 5px solid #dedede;\n    background-color:gray;\n`;\n\nconst BotaoSalvar = styled.button`\n    margin-top: 20px;\n    width: 30%;\n    height: 30px;\n    align-self: center;\n    background-color: #dedede;\n    color:black;\n        :hover{\n        color: white;\n        cursor: pointer;\n    \n`;\n \nconst NovoH3 = styled.h3`\n      text-align: center;\n      color:white;      \n\n`;\n\nexport class UserFormPage extends React.Component {\n  state = {\n    nameValue: \"\",\n    emailValue: \"\"\n  };\n\n  onChangeName = event => {\n    this.setState({ nameValue: event.target.value });\n  };\n\n  onChangeEmail = event => {\n    this.setState({ emailValue: event.target.value });\n  };\n\n  onClickCriar = () => {\n    const body = {\n      name: this.state.nameValue,\n      email: this.state.emailValue\n    };\n\n    axios\n      .post(\n        \"https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users\",\n        body,\n        {\n          headers: {\n            Authorization: \"shirlei-machado-julian\"\n          }\n        }\n      )\n      .then(response => {\n        window.alert(\"Usuario criado com sucesso!\");\n      })\n      .catch(error => {\n        console.log(error.response);\n        window.alert(\"Erro ao criar usuário!\");\n      });\n\n    this.setState({ nameValue: \"\", emailValue: \"\" });\n  };\n\n  render() {\n    return (\n      <FormContainer>\n      <NovoH3>Cadastre-se aqui</NovoH3>\n        <input\n          placeholder={\"Nome\"}\n          value={this.state.nameValue}\n          onChange={this.onChangeName}\n        />\n        <input\n          placeholder={\"Email\"}\n          value={this.state.emailValue}\n          onChange={this.onChangeEmail}\n        />\n        <BotaoSalvar onClick={this.onClickCriar}>CONFIRME</BotaoSalvar>\n      </FormContainer>\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\n\nconst UserItem = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items:center;\n    margin: 30px auto;\n    padding: 10px;\n    background-color:gray;\n    color:white;\n    border: 5px solid #dedede;\n    width:500px;\n`;\n \nconst NovoH1 = styled.h1`\n    text-align: center;\n    color: gray\n`;\n\nconst NovoButton = styled.button`\n    color:red;\n    background-color:gray;\n    border:none;\n     :hover{\n        cursor: pointer;   \n`;\n\n\nexport class UsersListPage extends React.Component {\n  state = {\n    usersList: []\n  };\n\n  componentDidMount() {\n    this.getUsersList();\n  }\n\n  getUsersList = async () => {\n    try {\n      const response = await axios.get(\n        \"https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users\",\n        {\n          headers: {\n            Authorization: \"shirlei-machado-julian\"\n          }\n        }\n      );\n\n      this.setState({ usersList: response.data });\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n\n  onClickDeleteUser = userId => {\n    axios\n      .delete(\n        `https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users/${userId}`,\n        {\n          headers: {\n            Authorization: \"shirlei-machado-julian\"\n          }\n        }\n      )\n      .then(response => {\n        window.alert(\"Usuario deletado com sucesso\");\n        this.getUsersList();\n      })\n      .catch(error => {\n        window.alert(\"Deu um erro :(\");\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <NovoH1>Lista de Usuários</NovoH1>\n        <div>\n          {this.state.usersList.map(user => {\n            return (\n              <UserItem>\n                <p>{user.name}</p>\n                <NovoButton onClick={() => this.onClickDeleteUser(user.id)}>\n                  X\n                </NovoButton>\n              </UserItem>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { UserFormPage } from \"./components/UserFormPage\";\nimport { UsersListPage } from \"./components/UsersListPage\";\n\n\nclass App extends React.Component {\n  state = {\n    currentPage: \"LIST\"\n  };\n\n  onClickChangePage = () => {\n    const nextPage = this.state.currentPage === \"FORM\" ? \"LIST\" : \"FORM\";\n\n    this.setState({ currentPage: nextPage });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.onClickChangePage}>\n          {this.state.currentPage === \"FORM\"\n          ? \"Ir para Lista de Usuários\"\n            : \"Ir para Cadastro\"}\n        </button>\n        {this.state.currentPage === \"FORM\" ? (\n          <UserFormPage />\n        ) : (\n          <UsersListPage />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}