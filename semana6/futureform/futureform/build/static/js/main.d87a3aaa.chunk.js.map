{"version":3,"sources":["components/Etapa1.js","components/Etapa2.js","components/Etapa3.js","components/Etapa4.js","App.js","serviceWorker.js","index.js"],"names":["Etapa1","state","valorNome","valorIdade","valorEmail","valorSelect","onChangevalorNome","event","setState","target","value","onChangevalorIdade","onChangevalorEmail","placeholder","onChange","this","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6MAIaA,EAAb,4MACEC,MAAQ,CACNC,UAAW,GACXC,WAAY,GACZC,WAAY,GACZC,YAAa,IALjB,EAQEC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAACN,UAAWK,EAAME,OAAOC,SAT3C,EAYEC,mBAAqB,SAACJ,GACpB,EAAKC,SAAS,CAACL,WAAYI,EAAME,OAAOC,SAb5C,EAgBEE,mBAAoB,SAACL,GACnB,EAAKC,SAAS,CAACJ,WAAYG,EAAME,OAAOC,SAjB5C,uDAsBI,OAAO,6BACL,qDACA,oDACA,2BAAOG,YAAa,WAAYC,SAAUC,KAAKT,kBAAmBI,MAAOK,KAAKd,MAAMC,YACpF,qDACA,2BAAOW,YAAa,YAAaC,SAAUC,KAAKJ,mBAAoBD,MAAOK,KAAKd,MAAME,aACtF,qDACA,2BAAOU,YAAa,aAAcC,SAAUC,KAAKH,mBAAoBF,MAAOK,KAAKd,MAAMG,aACvF,4DAEE,gCACE,iCACA,8DACA,4DACA,8DACA,8DAGJ,yDAxCN,GAA4BY,IAAMC,WCDND,IAAMC,UCAND,IAAMC,UCDND,IAAMC,UCKnB,SAASC,IACtB,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,OCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACT,EAAD,OAEFU,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d87a3aaa.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\nexport class Etapa1 extends React.Component{\n  state = {\n    valorNome: '',\n    valorIdade: '',\n    valorEmail: '',\n    valorSelect: ''\n  };\n\n  onChangevalorNome = (event) => {\n    this.setState({valorNome: event.target.value})\n  };\n\n  onChangevalorIdade = (event) => {\n    this.setState({valorIdade: event.target.value})\n  };\n\n  onChangevalorEmail= (event) => {\n    this.setState({valorEmail: event.target.value})\n  };\n\n  render() {\n\n    return <div>\n      <h1>Etapa1 - Dados Gerais</h1>\n      <label>1. Qual seu nome?</label>\n      <input placeholder={'Seu Nome'} onChange={this.onChangevalorNome} value={this.state.valorNome}/>\n      <label>2. Qual sua idade?</label>\n      <input placeholder={'Sua Idade'} onChange={this.onChangevalorIdade} value={this.state.valorIdade} />\n      <label>3. Qual seu email?</label>\n      <input placeholder={'Seu E-mail'} onChange={this.onChangevalorEmail} value={this.state.valorEmail}  />\n      <label>\n        4. Qual a sua escolaridade\n        <select>\n          <option></option>\n          <option>Ensino Médio Incompleto</option>\n          <option>Ensino Médio Completo</option>\n          <option>Ensino Superior Incompleto</option>\n          <option>Ensino Superior Completo</option>\n        </select>\n      </label>\n      <button>Próxima Etapa</button>\n\n    </div>\n  }\n}","import React from \"react\";\n\n\nexport class Etapa2 extends React.Component{\n    render(){\n        return <div>\n        <h1> ETAPA 2 - Informações do Ensino Superior</h1>\n        \n        <label> 5. Qual o curso?</label>\n         <input placeholder={'h1'}/>\n        <label>6. Qual a unidade de ensino?</label>\n         <input placeholder={'h1'}/>\n        <button> Próxima Etapa</button>\n        </div>\n    }\n}","import React from \"react\";\n\n\nexport class Etapa3 extends React.Component{\n\n    render() {\n      return <div>\n        <h1>Etapa 3 - Informações Gerais De Ensino</h1>\n\n         <label>5. Por que você não terminou um curso de graduação?</label>\n         <input placeholder={'h1'}/>\n         <label>6. Você fez algum curso complementar?\n          <select>\n            <option>Nenhum</option>\n            <option>Curso Técnico</option>\n            <option>Curso de Inglês</option>\n          </select>\n        </label>\n        \n        <button>Próxima Etapa</button>\n      </div>\n    }\n  }","import React from \"react\";\n\nexport class Etapa4 extends React.Component{\n    render() {\n      return <div>\n        <h1>O Formulário Acabou</h1>\n        <label>Muito obrigado por participar! Entraremos em contato!</label>\n      </div>\n    }\n  }","import React from 'react';\nimport styled from 'styled-components';\nimport {Etapa1} from \"./components/Etapa1.js\";\nimport {Etapa2} from \"./components/Etapa2.js\";\nimport {Etapa3} from \"./components/Etapa3.js\";\nimport {Etapa4} from \"./components/Etapa4.js\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n\n      <Etapa1/>\n     \n    </div> \n    \n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}